{
	"id": "6fe01e8bbff2f504dcd5de676f2eb578",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.24",
	"solcLongVersion": "0.8.24+commit.e11b9ed9",
	"input": {
		"language": "Solidity",
		"sources": {
			"chapter05/sample5-15-1.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^ 0.8.20;\r\n\r\n// contract Pet {\r\n//     function cry() public returns (string memory);\r\n// }\r\n\r\n// // Cat合约现在正确地实现了Pet接口\r\n// contract Cat is Pet {\r\n//     // 为了遵守接口，函数签名必须完全匹配\r\n//     // 'external' 的接口可以用 'public' 或 'external' 来实现\r\n//     function cry(string memory _sound) public {\r\n//         // 在这里可以添加具体逻辑，比如发出一个事件\r\n//         // emit Crying(_sound);\r\n//         // 注意：因为接口规定没有返回值，所以这里也不能有返回值\r\n//     }\r\n// }"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"sources": {
			"chapter05/sample5-15-1.sol": {
				"ast": {
					"absolutePath": "chapter05/sample5-15-1.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:25:0"
						}
					],
					"src": "33:597:0"
				},
				"id": 0
			}
		}
	}
}